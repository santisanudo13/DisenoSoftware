———————————————————————————————————————————————————————––––––––––——–––––––––––––––––––––––––––—–————––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
27 de Septiembre
———————————————————————————————————————————————————————––––––––––——–––––––––––––––––––––––––––—–————––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
	1- Propiedades en C#: Abstrae un poco de los getters y setters
	2- Colecciones en C# vs Java:
		
				POSICION RELEVANTE
			SI			NO
		   __________________________________________
		  |Set			|Lista sin repetición.  |
	     SI  |Java Set<>	  	|Java “		   |
		  |C# ISet		|			   |
Repeticiones	  ___________________________________________|
		  |Bag			|Lista/Secuencia	   |
	     NO  |Java Collection	|Java List		   |
		  |C# ICollection	|C# IList		   |
		  |__________________________________________|
	3- UML: 
		3.1- Las propiedades son publicas e implican getters y setters(no hace falta incluirlos en el esquema).
		3.2- + publica, # portegida, - private.
		3.3- Las protegidas(#) no se ponen getters y setters.
		3.4- {readOnly} en la propiedad e implica que solo tiene getter.
		3.5- +/ es una propiedad derivada de otra, estos implican que son {readOnly} sin ponerlo.
		3.6- Las listas se ponen como arrays, es decir, [1…3] o [*].
		
	4- Ejemplo Propiedad:

Public class Pepe
{
	private Set<String> nombres;
	public Set<String> Nombres{

	get {return nombres; }
	set {this.nombres = value; }
	}
}
	
			